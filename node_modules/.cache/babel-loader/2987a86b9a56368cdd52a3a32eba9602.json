{"ast":null,"code":"import { normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, withModifiers as _withModifiers, vShow as _vShow, withDirectives as _withDirectives, TransitionGroup as _TransitionGroup, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"questions-ctr\"\n};\nconst _hoisted_2 = {\n  class: \"progress\"\n};\nconst _hoisted_3 = {\n  class: \"status\"\n};\nconst _hoisted_4 = {\n  class: \"question\"\n};\nconst _hoisted_5 = {\n  class: \"answers\"\n};\nconst _hoisted_6 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", {\n    class: \"bar\",\n    style: _normalizeStyle({\n      width: `${$props.questionsAnswered / $props.questions.length * 100}%`\n    })\n  }, null, 4\n  /* STYLE */\n  ), _createElementVNode(\"div\", _hoisted_3, _toDisplayString($props.questionsAnswered) + \" out of \" + _toDisplayString($props.questions.length) + \" questions answered \", 1\n  /* TEXT */\n  )]), _createVNode(_TransitionGroup, {\n    name: \"\"\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.questions, (question, qi) => {\n      return _withDirectives((_openBlock(), _createElementBlock(\"div\", {\n        class: \"single-question\",\n        key: question.q\n      }, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString(question.q), 1\n      /* TEXT */\n      ), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(question.answers, answer => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          class: \"answer\",\n          key: answer.length,\n          onClick: _withModifiers($event => $options.selectAnswer(answer.is_correct), [\"prevent\"])\n        }, _toDisplayString(answer.text), 9\n        /* TEXT, PROPS */\n        , _hoisted_6);\n      }), 128\n      /* KEYED_FRAGMENT */\n      ))])])), [[_vShow, $props.questionsAnswered === qi]]);\n    }), 128\n    /* KEYED_FRAGMENT */\n    ))]),\n    _: 1\n    /* STABLE */\n\n  })]);\n}","map":{"version":3,"mappings":";;AACOA,OAAK,EAAC;;;AACJA,OAAK,EAAC;;;AAKJA,OAAK,EAAC;;;AAWJA,OAAK,EAAC;;;AACNA,OAAK,EAAC;;;;uBAlBjBC,oBA8BM,KA9BN,cA8BM,CA7BJC,oBAQM,KARN,cAQM,CAPJA,oBAGO,KAHP,EAGO;AAFLF,SAAK,EAAC,KAED;AADJG,SAAK;AAAAC,gBAAeC,2BAAoBA,iBAAUC,MAA7C,GAAmD;AAAnD;AACD,GAHP;;AAAA,GAOI,EAHJJ,oBAEM,KAFN,cAEMK,iBADDF,wBACC,IADmB,UACnB,GAD2BE,iBAAGF,iBAAUC,MAAb,CAC3B,GADiD,sBADvD,EAEA;AAAA;AAFA,GAGI,CARN,CA6BI,EApBJE,aAmBmBC,gBAnBnB,EAmBmB;AAnBDC,QAAI,EAAC;AAmBJ,GAnBnB,EAAyB;sBAGrB,MAAmC,oBAFrCT,oBAiBMU,SAjBN,EAiBM,IAjBN,EAiBMC,YAfqBP,gBAerB,EAf8B,CAA1BQ,QAA0B,EAAhBC,EAAgB,KAAd;4CAFtBb,oBAiBM,KAjBN,EAiBM;AAhBJD,aAAK,EAAC,iBAgBF;AAdHe,WAAG,EAAEF,QAAQ,CAACG;AAcX,OAjBN,GAMEd,oBAA4C,KAA5C,cAA4CK,iBAAnBM,QAAQ,CAACG,CAAU,CAA5C,EAAmC;AAAA;AAAnC,SACAd,oBASM,KATN,cASM,oBARJD,oBAOMU,SAPN,EAOM,IAPN,EAOMC,YALaC,QAAQ,CAACI,OAKtB,EALGC,MAA0B,IAApB;6BAFfjB,oBAOM,KAPN,EAOM;AANJD,eAAK,EAAC,QAMF;AAJHe,aAAG,EAAEG,MAAM,CAACZ,MAIT;AAHHa,iBAAK,2BAAUC,sBAAaF,MAAM,CAACG,UAApB,CAAV,EAAwC,WAAxC;AAGF,SAPN,mBAMKH,MAAM,CAACI,KANZ,EAMgB;AAAA;AANhB,UAMgBC,UANhB;OAOM,CAPN;;AAAA,OAQI,EATN,EAPF,cAIUlB,6BAAsBS;KAa1B,CAjBN;;AAAA,KAEqC,GAHd;;;;AAAA,GAAzB,CAoBI,CA9BN","names":["class","_createElementBlock","_createElementVNode","style","width","$props","length","_toDisplayString","_createVNode","_TransitionGroup","name","_Fragment","_renderList","question","qi","key","q","answers","answer","onClick","$options","is_correct","text","_hoisted_6"],"sourceRoot":"","sources":["D:\\Front-End\\Vue js\\quiz\\quiz\\src\\components\\Questions.vue"],"sourcesContent":["<template lang=\"\">\r\n  <div class=\"questions-ctr\">\r\n    <div class=\"progress\">\r\n      <div\r\n        class=\"bar\"\r\n        :style=\"{ width: `${(questionsAnswered / questions.length) * 100}%` }\"\r\n      ></div>\r\n      <div class=\"status\">\r\n        {{ questionsAnswered }} out of {{ questions.length }} questions answered\r\n      </div>\r\n    </div>\r\n    <transition-group name=\"\">\r\n      <div\r\n        class=\"single-question\"\r\n        v-for=\"(question, qi) in questions\"\r\n        :key=\"question.q\"\r\n        v-show=\"questionsAnswered === qi\"\r\n      >\r\n        <div class=\"question\">{{ question.q }}</div>\r\n        <div class=\"answers\">\r\n          <div\r\n            class=\"answer\"\r\n            v-for=\"answer in question.answers\"\r\n            :key=\"answer.length\"\r\n            @click.prevent=\"selectAnswer(answer.is_correct)\"\r\n          >\r\n            {{ answer.text }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </transition-group>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"my-qustions\",\r\n  props: [\"questions\", \"questionsAnswered\"],\r\n  emits: [\"question-answered\"],\r\n  methods: {\r\n    selectAnswer(is_correct) {\r\n      this.$emit(\"question-answered\", is_correct);\r\n    },\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}